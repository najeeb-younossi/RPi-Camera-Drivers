ADVANTAGES OF MOTION DETECTION WITH MOTION
At first I thought motion detection with a camera was only a nice side effect of having a camera for surveillance. Now I believe that motion detection via video gives better results in many situations even if it is only 2D. 
Standard motion detection sensors use passive infrared, ultrasonic or a combination of both. There are also microwave motion sensors that operate based on the Doppler Effect. Advantages of video based motion detection in comparison to passive infrared and ultrasonic are: 
Observed area --> With video based motion detection you can detect motion hundreds of meters away, if you use a telephoto lens. Additionally the program 'motion' allows you to configure in which areas of an image it should watch for change (see area_detect and mask_file). 
Filter options for noise --> The program 'motion' has a number of options with which you can minimize false motion events. For example threshold is the number of changed pixels after applying noise filters, minimum_motion_frames is the number of picture frames that must contain motion, lightswitch is the amount of light change to ignore, smart_mask_speed is how fast a self-learning mask, that will ignore frequently changing areas like wind blowing grass or trees, is updated, noise_tune uses an algorithm to automatically set and adjust the noise tolerance if the noise_level is not explicitly specified, and despeckle will Erode and/or Dilate the image to reduce noise. (See Motion Guide - Basic Features) 

INSTALLING MOTION
Surveillance is pretty boring if nothing happens. So the goal is to record only motion and this in the best possible quality. 
I will use the program 'motion' to detect change. There is also a fork called motion-mmalcam. It was necessary to use the fork before the UV4L Camera Driver existed. However I did not find additional features in motion-mmalcam that is why I am using motion. 
To install 'motion' type sudo apt-get install -y motion. To make a backup copy of the config file type sudo cp /etc/motion/motion.conf /etc/motion/motion_backup.conf, then ensure that user 'pi' is in group motion to be able to read /etc/motion/motion.conf with sudo usermod -a -G motion pi. 
You must exit the terminal and login again for the change to take effekt. 
Start motion with motion. Using LD_PRELOAD=/usr/lib/uv4l/uv4lext/armv6l/libuv4lext.so motion should not be necessary because /etc/environment already defines the variable. If it says "Error selecting input 0 VIDIOC_S_INPUT: Device or resource busy" then you will likely have the live HTTP stream on http://raspberrypi:8080/stream open. Apparently there can only be one program using /dev/video0. 
You will also see the message "Started stream webcam server in port 8081". Unfortunately the documentation is right by saying "You cannot watch the stream with most browsers. Only certain versions of Netscape work" (see MotionDoc - Webcam_Server). This is because the pixel format 'YUV 4:2:0' is not supported by most browsers. 
But you can open the stream with VLC. For this, stop motion with Ctrl-C. Then open /etc/motion/motion.conf and change the value "webcam_localhost on" to "webcam_localhost off" (off means to allow non-localhost computers access). You may also want to set the values "control_localhost on" to "control_localhost off" and "control_port 8080" to "control_port 8082". The port of the http interface to view and edit settings must be changed because port 8080 is already used by the http live stream of the UV4L driver. Start motion again. Now you can open the stream in VLC http://[pi-ip-address]:8081/video.mjpeg. 
To make motion start at boot time, open /etc/default/motion and change "start_motion_daemon=no" to "start_motion_daemon=yes". Additionally open /etc/init.d/motion and insert 
export LD_PRELOAD=/usr/lib/uv4l/uv4lext/armv6l/libuv4lext.so at line 57, underneath the line "chown motion:motion /var/run/motion". Then sudo reboot and check that motion is running by opening the stream with VLC. The camera LED should be permanently on. You can find log messages in the file /var/log/syslog. Every time a motion is detected, motion will save pictures and a video in /tmp/motion. So move the camera or walk in front of it if you want to see pictures in /tmp/motion. 
As said before, if one program is using the camera, then no other program can use the camera. So to make the camera available for other programs you can stop motion with sudo service motion stop. 

CONFIGURING MOTION
Now it is time to optimize the output of the 'motion' tool. The options 'width' and 'height' are very sensitive to CPU consumption. If these are increased too much, then the frame rate will drop. With a resolution of 640x480 the 'motion' program on the RPi is able to produce 3 to 4 pictures per second plus the swf video at almost 100% CPU usage. With the same values but without video motion generates 5 to 7 pictures per second on the RPi. Even though the resolution is disappointing, it has the advantage of saving bandwidth when the images are uploaded to google drive. Now I am wondering what resolution the Banana Pi can achieve with a very similar setup. 
Before setting the config values create a new folder where the pictures will be saved with mkdir -p /home/pi/google-drive/camera and set the motion user as owner sudo chown motion:motion /home/pi/google-drive/camera. 
To set the config values, open /etc/motion/motion.conf, set target_dir /home/pi/google-drive/camera, width 640, height 480, threshold 6000 (threshold was 1500 so about 2% of 320*240, the new value 6000 is about 2% of 640*480), minimum_motion_frames 2, pre_capture 4, framerate 5, ffmpeg_cap_new off, jpeg_filename %Y-%m-%d/%H-%M-%S--%q. 
Now open /etc/uv4l/uv4l-raspicam.conf, set exposure = fixedfps, shutter-speed = 2500. 
Now execute sudo service uv4l_raspicam restart and sudo service motion restart. 
